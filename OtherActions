let heal : (GameState, (u8, u8), (u8, u8), [[(u8, u8), u8, u8, u8, Bool, Bool, Bool, Bool]]) -> GameState =
  \ (gameState, (healerX, healerY), (targetX, targetY), playerStatiArray) ->
    let (healerX', healerY', healerZ') = coordinateMap (healerX, healerY)
        (targetX', targetY', targetZ') = coordinateMap (targetX, targetY)
        healerHealing = gameState[healerX'][healerY'][healerZ'][2]
        (targetHealth, _, _, _, _, _, _, originalHealth, _) = gameState[targetX'][targetY'][targetZ']
        dx = abs(healerX' - targetX')
        dy = abs(healerY' - targetY')
        dz = abs(healerZ' - targetZ')
        isNeighbor = dx <= 1 && dy <= 1 && dz <= 1
        isInjured = targetHealth < originalHealth

    in if isNeighbor && isInjured
       then let newTargetHealth = min(originalHealth, targetHealth + healerHealing)
                updatedUnit = [newTargetHealth] ++ gameState[targetX'][targetY'][targetZ'][1:]
                updatedGameState = map (\z ->
                                          map (\y' ->
                                                 map (\x' ->
                                                        if (x', y', z') == (targetX', targetY', targetZ')
                                                        then updatedUnit
                                                        else gameState[x'][y'][z'])
                                                     (0 ..< height))
                                               (0 ..< width))
                                         (0 ..< depth)
            in updatedGameState
       else gameState
let healCopilotV : (GameState, (u8, u8), (u8, u8), [[(u8, u8), u8, Bool, Bool, Bool, Bool]]) -> (GameState, [[(u8, u8), u8, Bool, Bool, Bool]]) =
  \ (gameState, (healerX, healerY), (targetX, targetY), playerStatiArray) ->
    let (width, height, depth) = (30, 22, 22)
        (healerX', healerY', _) = coordinateMap (healerX, healerY)
        (targetX', targetY', _) = coordinateMap (targetX, targetY)

    let isNeighbor = abs(i32(healerX' - targetX')) <= 1 && abs(i32(healerY' - targetY')) <= 1

    if isNeighbor
    then
      let targetXIndex = toIndex targetX'
          targetYIndex = toIndex targetY'
          healerXIndex = toIndex healerX'
          healerYIndex = toIndex healerY'

          target = gameState[targetXIndex][targetYIndex][0]
          healerHealing = gameState[healerXIndex][healerYIndex][0][2]
          (targetHealth, _, _, _, _, _, _, originalHealth, _) = target

      let isInjured = targetHealth < originalHealth

      if isInjured
      then
        let newTargetHealth = min(originalHealth, targetHealth + healerHealing)
            updatedUnit = [newTargetHealth] ++ target[1:]
            updatedGameState = map (\z ->
                                    map (\y' ->
                                          map (\x' ->
                                                if (x', y', z') == (targetX', targetY', 0)
                                                then updatedUnit
                                                else gameState[x'][y'][z'])
                                            (0 ..< height))
                                        (0 ..< width))
                                  (0 ..< depth)

            -- Update playerStatiArray
            updatedPlayerStatiArray = map (\unit ->
                                             if (unit[0], unit[1]) == (targetX, targetY) && unit[2] > 0 && not unit[4]
                                             then (unit[0], unit[1], unit[2] - 1, unit[3], True, unit[5])
                                             else unit)
                                           playerStatiArray
        in
        (updatedGameState, updatedPlayerStatiArray)
      else
        (gameState, playerStatiArray)
    else
      (gameState, playerStatiArray)


let freeze : (GameState, (u8, u8), (u8, u8), [[(u8, u8), u8, Bool, Bool, Bool, Bool]], [[(u8, u8), u8, Bool, Bool, Bool, Bool]]) -> (GameState, [[(u8, u8), u8, Bool, Bool, Bool, Bool]], [[(u8, u8), u8, Bool, Bool, Bool, Bool]]) =
  \ (gameState, (freezerX, freezerY), (targetX, targetY), freezerPlayerStatiArray, enemyPlayerStatiArray) ->
    let freezerStati = lookupDefault (freezerX, freezerY) (0, 0, False, False, False, False) freezerPlayerStatiArray
        freezerActionsLeft = freezerStati[1]
        freezerFreezed = freezerStati[5]

    let targetInEnemyStatiArray = any (\(x, y, _, _, _, _) -> x == targetX && y == targetY) enemyPlayerStatiArray

    if freezerActionsLeft > 0 && not freezerFreezed && targetInEnemyStatiArray
    then
      let freezerFreezeRange = freezerStati[7]
          (targetX', targetY', _) = coordinateMap (targetX, targetY)

      let isInRange = isInRange freezerX freezerY targetX' targetY' freezerFreezeRange gameState

      if isInRange
      then
        let updatedEnemyStatiArray = map (\unit ->
                                            if unit[0] == targetX && unit[1] == targetY
                                            then (unit[0], unit[1], 0, unit[3], unit[4], unit[5])
                                            else unit)
                                          enemyPlayerStatiArray

            updatedFreezerStati = (freezerX, freezerY, freezerStati[1] - 1, freezerStati[2], freezerStati[3], True)

            updatedFreezerPlayerStatiArray = map (\unit ->
                                                    if unit[0] == (freezerX, freezerY)
                                                    then updatedFreezerStati
                                                    else unit)
                                                  freezerPlayerStatiArray

        in
        (gameState, updatedFreezerPlayerStatiArray, updatedEnemyStatiArray)
      else
        (gameState, freezerPlayerStatiArray, enemyPlayerStatiArray)
    else
      (gameState, freezerPlayerStatiArray, enemyPlayerStatiArray)
