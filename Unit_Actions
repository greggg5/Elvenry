let moveUnit : (GameState, (u8, u8), (u8, u8), [[(u8, u8, u8, Bool, Bool, Bool)]]) -> (GameState, [[(u8, u8, u8, Bool, Bool, Bool)]]) =
  \ (gameState, (x1, y1), (x2, y2), playerStatiArray) ->
    let (x1', y1', z1') = coordinateMap (x1, y1)
        (x2', y2', z2') = coordinateMap (x2, y2)
        unitAttrs = gameState[toIndex x1'][toIndex y1'][playerId]
        (health, attack, speed, range, flying, areaEffect, cardID, instance) =
          (unitAttrs[0], unitAttrs[1], unitAttrs[2], unitAttrs[3], unitAttrs[4], unitAttrs[5], unitAttrs[6], unitAttrs[7])
        width = 30  -- Updated width for cube coordinates
        height = 22  -- Updated height for cube coordinates
        depth = 22  -- Updated depth for cube coordinates
        -- Retrieve unit's status from the playerStatiArray
        currentPlayerStati = playerStatiArray[playerId]
        unitStatus = lookupDefault (cardID, instance, 0, False, False, False) currentPlayerStati
        -- Check if the unit has actions left
        hasActionsLeft = unitStatus[2] > 0
        -- Check if the unit has a half-integer speed and hasn't moved
        shouldMove =
          case speed % 1.0 of
            0.5 -> not (unitStatus[3])
            _ -> true

    -- Check if the move is valid and the unit has actions left
    if isValidMove x1' y1' z1' x2' y2' z2' gameState == 0 || not hasActionsLeft || not shouldMove
    then
      (gameState, playerStatiArray)  -- Target position is unreachable, or the unit has no actions left, or can't move due to its half-integer speed and having moved
    else
      let updatedGameState = map (\x ->
                                   map (\y ->
                                          map (\z ->
                                                 if (x, y, z) == (x1', y1', z1')
                                                 then (-1, -1, -1.0, -1.0, False, False, -1, -1)
                                                 else if (x, y, z) == (x2', y2', z2')
                                                      then (health, attack, speed, range, flying, areaEffect, cardID, instance)
                                                      else gameState[x][y][z])
                                     (iota depth))
                               (iota height))
                            (iota width)
          updatedPlayerStatiArray = map (\unit ->
                                           if unit == unitStatus
                                           then (cardID, instance, unit[2] - 1, True, unit[4], unit[5])
                                           else unit)
                                         currentPlayerStati
      in
      (updatedGameState, updateAt playerStatiArray playerId updatedPlayerStatiArray)


let coordinateMap : (u8, u8) -> (u8, u8, u8) =
\ (x, y) ->
  let z = -(x + y)
  in (x, y, z)


let isValidMove : (u8, u8, u8, u8, [[[[u8]]]]) -> u8 =
\ (startX, startY, endX, endY, gameState) ->
let width = length gameState
height = length (gameState[0])
depth = length (gameState[0][0])

let rec bfs : [(u8, u8, u8)] -> [(u8, u8, u8)] -> u8 =
\ frontier visited ->
case frontier of
[] -> 0 -- No valid path found
(x, y, z) :: rest ->
let neighbors = [(x+1, y, z-1), (x+1, y-1, z), (x, y-1, z+1), (x-1, y, z+1), (x-1, y+1, z), (x, y+1, z-1)]
validNeighbors = filter (\(nx, ny, nz) ->
0 <= nx && nx < width &&
0 <= ny && ny < height &&
0 <= nz && nz < depth &&
gameState[toIndex nx][toIndex ny][toIndex nz][0] == -1)
neighbors
newFrontier = filter (\(nx, ny, nz) -> notElem (nx, ny, nz) visited) validNeighbors
newVisited = visited ++ newFrontier
in
if (x, y, z) == (endX, endY, 0)
then 1 -- Valid path found
else bfs rest newVisited

if gameState[toIndex endX][toIndex endY][0] != -1
then 0 -- Destination space is occupied
else
let pathExists = bfs [(endX, endY, 0)] []
in
if pathExists == 1 && abs(endX - startX) + abs(endY - startY) <= speed
then 1 -- Valid path found
else 0 -- No valid path found

