application/x-openoffice-embed-source-xml;windows_formatname="Star Embed Source (XML)"
25ca
PK�ZX^�2''mimetypeapplication/vnd.oasis.opendocument.textPK�ZXmanifest.rdf͓�n�0��<�e��@/r(ʹj��5�X/�޾��VQ�����F3ߎ���aȋ���T4c)%�Hh��+:�.���:�ض+��j���*�wn*9_��-7lϳ�(x��]Wk�z�:��?��?(=��]^^V���[�R/7:�ś�����>V��/w�_���j���V�_���X�a����j-��)��:ۜ�.;e�|��3����*۞����x���UVY�c��#��U�jgWշB�܃�����c�l}�W�V+'��,����5A�a����
�0YiX��a:�����@_ŰK��	�C���.����B���p��Hj.�P+�A�i�}�|/�#p�1��+�����lY
.���$t��1�2�-%�V�J��K�EO3�r���%��5�������ډ,�)��鹥F�Di[iX�����* Q"M�e�Ht8���L^~S����'
7if��_�-���f��67.�өˍ�2��×`Ia>���[��2�@�8�h\������p9a���d:\�.ߒA���s�L�,�cXt�N���<�������ZЁ}ώ!}�@gղZJ�)B`O��u�}%	�	����TUΫh�4�#�3����c�+
g�^M+���f ���o�2W���1���P�l��@�,�x�#�k���Ŭuu�^a��qI��AN\�{5�
F����U�n�P�3��vWBY P�G!��[LF ��(�{-��`5�(�H|�l��#�F�����cՕ1ȝ����({dW����aF��,��*
���!���aؿ���=�ʵFW��f��)���o����=��M2��q����c�k��h�r��n���m�GXKT��;f�v֧Quψ�ۍ Qr�-U���+���ϒSlhG(��1�[C��=�:�.fv���uTB"B��������y�x�F䣈�Et�h��0�H<���v{D�E\2N�Q��f�H�2�"���f�>�L�����Q,ʓ�J�hG�+	�R��Wm��\P�K]4[W��*N��ر�uRLˋ�M.�^�[L������#�7K��g��O�/J��uM*U��L��s�ܺ-�<�����(�]G)�bW3��r���n �Lb�Ve�Y�Z�	7���������#LbA�
$W��
5a��ڿt��l.
�^��̫�!M�q�蕒}P�1�5������zg}uS�wxo�
��M�5LaZ�v��JB�~nkh
3��p�ܔ��83���
���yD��J�X#6s3�h�C8���Ŭ#�en���
ݶ�ی'��\�Y�Aw&�
�lM��Jʞ�:d����Jp˒�����˧K���0�9T[?��{T*�^Qty�����x�j�y��w�i�����`:E�$�Ӈ�2.j
�ȅD��(T��X��yak�����5o8�,>�rc���=�\��Pu8�� �"±�D᡺4o���h��˷f��jb��uˇ*9J���g��������P�e��f�w�ER�����9��醈����m?�_8̛�@O�<]�|.��"M��Ji�A5	33m]��B�R�2La���0�N4��߉$a]���K�z������Y:I ��0<�1a6Dt^�1A	s��Wש�s�JD3�[���١��}O0�N>����C�"�"����cA����r�2�^���e3��F����\D��	��p:nqLPBb&߽���G��6�.z���G#8KJ�)���5
�H[i[�g5����~�����W��B0�}�Y��9�i�����������K�a��������q	m<�]\�d5O���^j�{�*;�g��A��`����Ԏ�ߎ�+��Eyz�����J�x�>}�a��ɩ�yL���p$��Es�B�Ĺ��^�nOW7�A���{Bw{��g��7�a��I��=�L;�@�|��n��l��Ӝ.|�i��ෞ>�P���ZW�.�ym�؜>�W{��-���No���|�?����o�d��n�e����l}d�J�0x��L�B�"����<�g���i��Z�<��
g��N9�WQ����G���jwS�
>9�
UTvm���ya�}�o^u����u,�=�!�/�|��B�}�
��i�ΌIf��kQ�[�j`ᅲ�g-�������a%��T�����A��A��.z3{ ���f+��i!�Kjn���5�#qo�xdh�v��B�Kl���m��1~�]ܜlK��&���6��A2�y?X�W�`-��Z���k����XW�`]������W�`��u�
V��~�n_�j���k�
V�(���J�$��Ì+"u��������T^o9W�wb����~���Y��<*�D�*�;
�d�9DZ��[����,�3�v��kD*������O=�%��:���R���V�4�������I�/e���Y�!
Ȅ���:
(x�	����}��Y��Ը@0�M�_�܎�]���.zWJ���S��K��\(����O7�7˾'�6M�Mֺ���3�ZD)>�ՙ���R��_�YJ�ut9U��)��M���M���m�8f�aZ�n;��V���S�]$9���'�+��c�ȎC��vr^���3��/�#�>��'X�e~LB�����{��ZR,���Ԓ�h�׬���̓�i��t�	��PK�>�
�;PK�ZXcontent.xml�]{s�6��>�7��Ƣ%R�#�Q:פis���$��q<��$^(�GB����~�A�����t�L����]���~�^��'i@�ɑ}28B8�D���/o�Z��o��!�N�}�-8��G"
�#x;JǢ�29�S��}�H<=!ɬ��}q$���tHU��ju��o^�Y�E���ڳ��ê�@y؟�}���M�W���X���
�����K��S�,֓�e�s�Ǒ����c���n8&^��?�h~B�qN`�u'y��Y����_{s�p�FJ�(�H�=���OpL���=U9^&!��{}b&lڷOl�=o�&T6�M�T��z���Q�Ze�5�ͬ�P\c�4��N�O�U]*�.���:s����������Ş�=7�Tc�&ĵ��*�X���Z%8NV}��[��[�0�>��oV��w]&�4��d�	����R�wu�>Wp��_�a�~�[���F������'�yC����
���Q�sOOf*�N�2N���{m\�pK�
μ��Y��`��NV?$
��&�(�O;C(���E9���z�X��������:~�N����~8꿀B���s=����rbI�$�kBQ��0F0��6�/���ԟ�G�2 ��}�`
X����|�飇�;��H�3I'G��$(9B�*�*� ��%��̚�LAN*e�k��A��n���ի!X�
��HgdP�߸�;�wv�V�XG�MJ��D����
��_�F��Wx��d���^�����gU��o �ݺ$-�uCi�bj��w[ 5��p��gQ�O�^o�$��P�a�?Őb�V*J�IW����%��L��T
�?"�l+nR��M�Y����&���[�a�仉�fߊ!��8��#�N�8t��ҝA)���	M@�_^g9��XIdA� ����6ְׄ=�t��V�o��+m�^;���=��S��ʂk�o�
��C>�L��8����C��A���"K
/l�OC��H��>�eJEk��F��d��
\y"���t��e���߭�X��{�6YxM�ǅ�|�	�i�����aL���������c�;��1�%
�?)M��%G���w��=$�$hATv��B�58y�D�בN#2*ӡs��P�Oc�}���6�SAz�ݐ�Cۥ��>H'	�l@{�=��\�P�!R��O�أ�����{��$���x@�� iu�`��E;�f�E���G!��#$�A��p�L����
�Bֽ�F=�'
����RA��D&��5��8 s0jF���U��y��8��[��1��Ԁ�T5{��]�1��{hӕ��oz���1<�v��-�27����G�E_4p;�D�KQG�h-#�6zӠA�:9��[(��̑��j����z�']����!l��0C(���P���ʬ�+��^)�(��-�0	3�3ӄ����	�a��ɬ�F �ӓ`�'�RO���L�=-��dv�L�S�
���i(�k=$�R���w�4���i+n�K� ���q�}`��q����\]���'Ȳ�o��*�e١���l͕L�� ����csYp�6��g�Z��Y|�!�f"@nM:��T%���b2�rEm����.�lE������0`n�91ߟd��)=��.�o�Yٖ%M��Lz*�Y�a���2��=���Qo�og>)��:4�;hʠ5)bO�{����ē
�y�Xp\ˣV���l�BO�4�`T����l�aJIRs�]��˘$:ژ-�wc2�3S��mL'sVN����ty|�%(��a������\,ClYOl>uͦ������H2��ʂ"\�@W*|z(�Ѓ�hH����A�,k� esTQMP��W���h�T��Y3=H�@�jw���9C̔�c�?�Ϥ�M6r�����ݾ����S��Ę�ŧR,�R���(VB�/(� #|5�4����#����^=�hm=DbG�X��ܸA�6���20v���a�(��ܞ/4�1<"�ͼh���Sвڐ�F}�|Y���R�5��!@e�?�q~i8?��|m#�>* �*�Q�]��V*7�
��An0۟�o+�.�O0t��O�n
���
�o{��уѻ�������ʭ�7I������}����w��7MHD��� 
h�lм�E��"_H��9�6\�]�/	�a^�b��?�i�D.�m�l��Bj��QX"�ͯ	�|p�Yۂ�ewٮ%~kٌ����o�E�%+��ze~�����\�/5)�AH�`���xD @�5�j�Yv�M��	0v�u��6m
�6H[�n�Ӷ�i���v�V(y�x
z�ʯ7���J�3i:#l��%����Y>�z�^�B�l�<�n��PAƢn��L�_e���Xw̠��נ�7Eh�ܵ�G!0bGO1�����l�.D�_�	���4��x��|ȭ�ٖ�G3�P}���ݒd�}�TC��;��ȚQ�H���$8��@'D��I�|@�y��6���ߎn��~w�o&5��YO�]َk6XMcv�5H1�5j�S�/1L��l=���=9t��:H)�s_����l�#�Ѥ0;���е��q�W�Beu�FrkS�ب� ��o�dƲ��t�Q�����*��/�q�g=R�7Q,���Y�u4��C9FG��32�A��M�t���w2�~ʝs�?Qjg���U�3	���A�7ȃ���Q"cW�=_U�ΔAz�y<��ِS���AL%�3Y�D���o�s*�#��D5OG��h<9ี-��qv��W��!!�q~n[�Ä��x���������R��MQ�|'���S�H0��4��2�楛�ts�t��*�u����UT�g��*�m�iSG�z�zs-���1_�+���B���L�T��3�gj�Җ��|�}&g'���H��SE���y��:�Oķ������
�;
?styles.xmlPK�ZX��h]4t�content.xmlPK�ZX���^��#META-INF/manifest.xmlPK^V$
text/rtf
147eb
{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Carlito{\*\falt Calibri};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fmodern\fprq1\fcharset0 Liberation Mono{\*\falt Courier New};}{\f6\fnil\fprq0\fcharset2 OpenSymbol{\*\falt Arial Unicode MS};}{\f7\fmodern\fprq1\fcharset0 Noto Sans Mono CJK SC;}{\f8\fnil\fprq2\fcharset0 Noto Sans CJK SC Regular;}{\f9\fswiss\fprq0\fcharset128 Noto Sans Devanagari;}{\f10\fnil\fprq2\fcharset0 Lohit Devanagari;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052 Normal;}
{\*\cs10\snext10\rtlch\af5 \ltrch\hich\af5\loch\f5\dbch\af7 Source Text;}
{\*\cs11\snext11\rtlch\af6 \ltrch\hich\af6\loch\f6\dbch\af6 Bullets;}
{\*\cs12\snext12\rtlch\ab \ltrch\loch\b Strong;}
{\*\cs13\snext13 Numbering Symbols;}
{\s14\sbasedon0\snext14\rtlch\af5\afs20 \ltrch\hich\af5\loch\sb0\sa0\f5\fs20\dbch\af7 Preformatted Text;}
{\s15\sbasedon0\snext15\rtlch\af9 \ltrch\loch\noline Index;}
{\s16\sbasedon0\snext16\rtlch\af9\afs24\ai \ltrch\loch\sb120\sa120\noline\fs24\i Caption;}
{\s17\sbasedon18\snext17\rtlch\af9 \ltrch\loch\sl276\slmult1\sb0\sa140 List;}
{\s18\sbasedon0\snext18\loch\sl276\slmult1\sb0\sa140 Body Text;}
{\s19\sbasedon0\snext18\rtlch\af10\afs28 \ltrch\hich\af4\loch\sb240\sa120\keepn\f4\fs28\dbch\af8 Heading;}
}{\*\generator Collabora_Office/22.05.15.2$Linux_X86_64 LibreOffice_project/e747ea966384ab782a6aac38b4ec99d38c5fd2e9}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab709
\hyphauto1
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Page Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\pgndec\sftnnar\saftnnrlc\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}type UnitAttributes = (Bool,   -- playerID}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
f32,    -- speed}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- health}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- attack}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
f32,    -- range}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
Bool,   -- flying}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
Bool,   -- areaEffect}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- healing}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- originalHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- cardID}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8)     -- instance}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let coordinateMapping : [(i8, i8)] -> [(i8, i8, i8)] =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\coords ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let zStart = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
width = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = 44 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
map (\\(x, y) -> (x, y, -(x + y))) coords}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let allCoordinates : [(i8, i8)] =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
concat (map (\\x -> map (\\y -> (x, y)) (0 ..< 14 : i8)) (0 ..< 12 : i8))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let cubeCoordinates = coordinateMapping allCoordinates}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x, y), unitAttrs, gameLog) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attack, speed, range, flying, areaEffect, cardID, instance, playerID) = unitAttrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (width, height, depth) = (22, 22, 44)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isOccupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
(gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\x' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
let attrs = gameState[x'][y'][z']}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if attrs[0] == -1 || (attrs[0] == -1 && attrs[1] == -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then if playerID == False && attrs[7] == instance}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                   }{\hich\af4\loch\lang1033\f4\loch
then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                   }{\hich\af4\loch\lang1033\f4\loch
else if playerID == True && attrs[7] == instance + 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                        }{\hich\af4\loch\lang1033\f4\loch
then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                        }{\hich\af4\loch\lang1033\f4\loch
else attrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else attrs)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                            }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                      }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
updatedGameLog = gameLog ++ [(x, y, cardID)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(updatedGameState, updatedGameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let payMana : Mana -> i8 -> i8 -> Color -> (Mana, Bool) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ mana colorCost neutralCost color ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (enoughColorMana, newColorMana, newChromeMana) = case color of}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Red -> if mana.red + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                 }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.red - colorCost, if mana.red >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.red))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                 }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.red, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Green -> if mana.green + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                   }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.green - colorCost, if mana.green >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.green))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                   }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.green, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Blue -> if mana.blue + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                  }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.blue - colorCost, if mana.blue >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.blue))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                  }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.blue, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Yellow -> if mana.yellow + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                    }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.yellow - colorCost, if mana.yellow >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.yellow))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                    }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.yellow, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let enoughNeutralMana = colorCost + neutralCost <= newColorMana + mana.neutral}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newNeutralMana = if enoughNeutralMana then mana.neutral + neutralCost else mana.neutral}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
if enoughColorMana && enoughNeutralMana}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
then (\{ red = if color == Red then newColorMana else mana.red,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
green = if color == Green then newColorMana else mana.green,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
blue = if color == Blue then newColorMana else mana.blue,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
yellow = if color == Yellow then newColorMana else mana.yellow,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
neutral = newNeutralMana,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
chrome = newChromeMana \}, True)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
else (mana, False)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Define a type for mana stores}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
type Mana = \{ red :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
green :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
blue :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
yellow :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
neutral :: i8 \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to initialize the accumulator}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let initAccumulator : Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\{ red = 0, green = 0, blue = 0, yellow = 0, neutral = 0 \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to update the accumulator when mana is spent}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let updateAccumulator : Mana -> i8 -> i8 -> Color -> Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ acc colorCost neutralCost color ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newRed = if color == Red then acc.red + colorCost else acc.red}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newGreen = if color == Green then acc.green + colorCost else acc.green}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newBlue = if color == Blue then acc.blue + colorCost else acc.blue}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newYellow = if color == Yellow then acc.yellow + colorCost else acc.yellow}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newNeutral = acc.neutral + neutralCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\{ red = newRed, green = newGreen, blue = newBlue, yellow = newYellow, neutral = newNeutral \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to calculate available mana for each color}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let availableMana : Mana -> Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ spentMana ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let floorHalf = \\x -> x / 2}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\{ red = floorHalf spentMana.red,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
green = floorHalf spentMana.green,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
blue = floorHalf spentMana.blue,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
yellow = floorHalf spentMana.yellow,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
neutral = floorHalf spentMana.neutral \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let isValidMove : (i8, i8, i8, i8, [[[[i32]]]]) -> i32 =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (startX, startY, endX, endY, gameState) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let rec bfs : [(i8, i8, i8)] -> [(i8, i8, i8)] -> i32 =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\\ frontier visited ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
case frontier of}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
[] -> 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
(x, y, z) :: rest ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
let neighbors = [(x+1, y, z-1), (x+1, y-1, z), (x, y-1, z+1), (x-1, y, z+1), (x-1, y+1, z), (x, y+1, z-1)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
validNeighbors = filter (\\(nx, ny, nz) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= nx && nx < width &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= ny && ny < height &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= nz && nz < depth &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
gameState[toIndex nx][toIndex ny][toIndex nz][0] == -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                         }{\hich\af4\loch\lang1033\f4\loch
neighbors}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
newFrontier = filter (\\(nx, ny, nz) -> not (contains (nx, ny, nz) visited)) validNeighbors}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
newVisited = visited ++ newFrontier}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (endX, endY, 0)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
else bfs rest newVisited}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let width = length gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = length (gameState[0])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = length (gameState[0][0])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
startZ = -(startX + startY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
endZ = -(endX + endY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if gameState[toIndex endX][toIndex endY][0] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then 0  -- Destination space is occupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
if endZ == 0}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
let pathExists = bfs [(endX, endY, 0)] []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
if pathExists == 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
else 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
let pathExists = bfs [(endX, endY, 0)] []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
if pathExists == 1 && abs(endX - startX) + abs(endY - startY) <= speed}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
else 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let moveUnit : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x1, y1, z1), (x2, y2, z2)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let unitAttrs = gameState[toIndex x1][toIndex y1][playerId]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(health, attack, speed, range, flying, areaEffect, cardID, instance) = (unitAttrs[0], unitAttrs[1], unitAttrs[2], unitAttrs[3], unitAttrs[4], unitAttrs[5], unitAttrs[6], unitAttrs[7])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
width = 22}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = 22}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = 44}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
startZ = -(x1 + y1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
endZ = -(x2 + y2)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isValid = isValidMove x1 y1 z1 x2 y2 z2 gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isValid == 0}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
gameState -- Target position is unreachable within the unit's speed limit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\x ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (x1, y1, z1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then (-1, -1, -1.0, -1.0, False, False, -1, -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else gameState[x][y][z]))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                    }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
updatedGameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let attack : (GameState, (i8, i8), (i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x1, y1), (x2, y2)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attackPower, range, _, _, _, _) = gameState[toIndex x1][toIndex y1][playerId]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
targetHealth = gameState[toIndex x2][toIndex y2][playerId][0]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(x1', y1', z1') = lookupCoordinate (x1, y1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(x2', y2', z2') = lookupCoordinate (x2, y2)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
newTargetHealth = if max(i8(abs(x2' - x1')), i8(abs(y2' - y1')), i8(abs(z2' - z1'))) <= range}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                          }{\hich\af4\loch\lang1033\f4\loch
then max(targetHealth - attackPower, 0)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                          }{\hich\af4\loch\lang1033\f4\loch
else targetHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
updateGameState : i32 -> GameState -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
\\ newHealth gameState' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
let updatedUnit = if newHealth > 0 then [newHealth, attackPower, range, _, _, _, _, _, _, _] else []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
map (\\x ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                     }{\hich\af4\loch\lang1033\f4\loch
map (\\y ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                           }{\hich\af4\loch\lang1033\f4\loch
map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (x2', y2', z2')}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
then updatedUnit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
else gameState[x][y][z]))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                         }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                  }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                  }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
updateGameState newTargetHealth gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let heal : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (healerX, healerY, healerZ), (targetX, targetY, targetZ)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (width, height, depth) = (22, 22, 44)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let healerHealing = gameState[toIndex healerX][toIndex healerY][0][2]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (targetHealth, _, _, _, _, _, _, originalHealth, _) = gameState[toIndex targetX][toIndex targetY][0]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dx = abs(healerX - targetX)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dy = abs(healerY - targetY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dz = abs(healerZ - targetZ)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isNeighbor = dx <= 1 && dy <= 1 && dz <= 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isInjured = targetHealth < originalHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isNeighbor && isInjured}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let newTargetHealth = min(originalHealth, targetHealth + healerHealing)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedUnit = [newTargetHealth] ++ gameState[toIndex targetX][toIndex targetY][0][1:]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\x' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if (x', y', z') == (targetX, targetY, targetZ)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then updatedUnit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else gameState[x'][y'][z'])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                            }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                      }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
updatedGameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x, y), unitAttrs, gameLog) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attack, speed, range, flying, areaEffect, cardID, instance) = unitAttrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
if isOccupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
(gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedLocation = [health, attack, speed, range, flying, areaEffect, cardID, instance]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedLayer = map (\\layer -> updatedLocation) (gameState[x])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedState = map (\\grid -> updatedLayer) gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedGameLog = gameLog ++ [(x, y, cardID)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
if updatedState[0][0][0] == -1 && updatedState[0][0][1] == -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
then (updatedState, updatedGameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
else (gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch
{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}
}
text/richtext
147eb
{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Carlito{\*\falt Calibri};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fmodern\fprq1\fcharset0 Liberation Mono{\*\falt Courier New};}{\f6\fnil\fprq0\fcharset2 OpenSymbol{\*\falt Arial Unicode MS};}{\f7\fmodern\fprq1\fcharset0 Noto Sans Mono CJK SC;}{\f8\fnil\fprq2\fcharset0 Noto Sans CJK SC Regular;}{\f9\fswiss\fprq0\fcharset128 Noto Sans Devanagari;}{\f10\fnil\fprq2\fcharset0 Lohit Devanagari;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052 Normal;}
{\*\cs10\snext10\rtlch\af5 \ltrch\hich\af5\loch\f5\dbch\af7 Source Text;}
{\*\cs11\snext11\rtlch\af6 \ltrch\hich\af6\loch\f6\dbch\af6 Bullets;}
{\*\cs12\snext12\rtlch\ab \ltrch\loch\b Strong;}
{\*\cs13\snext13 Numbering Symbols;}
{\s14\sbasedon0\snext14\rtlch\af5\afs20 \ltrch\hich\af5\loch\sb0\sa0\f5\fs20\dbch\af7 Preformatted Text;}
{\s15\sbasedon0\snext15\rtlch\af9 \ltrch\loch\noline Index;}
{\s16\sbasedon0\snext16\rtlch\af9\afs24\ai \ltrch\loch\sb120\sa120\noline\fs24\i Caption;}
{\s17\sbasedon18\snext17\rtlch\af9 \ltrch\loch\sl276\slmult1\sb0\sa140 List;}
{\s18\sbasedon0\snext18\loch\sl276\slmult1\sb0\sa140 Body Text;}
{\s19\sbasedon0\snext18\rtlch\af10\afs28 \ltrch\hich\af4\loch\sb240\sa120\keepn\f4\fs28\dbch\af8 Heading;}
}{\*\generator Collabora_Office/22.05.15.2$Linux_X86_64 LibreOffice_project/e747ea966384ab782a6aac38b4ec99d38c5fd2e9}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab709
\hyphauto1
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Page Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\pgndec\sftnnar\saftnnrlc\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}type UnitAttributes = (Bool,   -- playerID}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
f32,    -- speed}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- health}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- attack}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
f32,    -- range}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
Bool,   -- flying}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
Bool,   -- areaEffect}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- healing}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- originalHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8,     -- cardID}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                       }{\hich\af4\loch\lang1033\f4\loch
i8)     -- instance}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let coordinateMapping : [(i8, i8)] -> [(i8, i8, i8)] =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\coords ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let zStart = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
width = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = 22 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = 44 : i8}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
map (\\(x, y) -> (x, y, -(x + y))) coords}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let allCoordinates : [(i8, i8)] =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
concat (map (\\x -> map (\\y -> (x, y)) (0 ..< 14 : i8)) (0 ..< 12 : i8))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let cubeCoordinates = coordinateMapping allCoordinates}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x, y), unitAttrs, gameLog) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attack, speed, range, flying, areaEffect, cardID, instance, playerID) = unitAttrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (width, height, depth) = (22, 22, 44)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isOccupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
(gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\x' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
let attrs = gameState[x'][y'][z']}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if attrs[0] == -1 || (attrs[0] == -1 && attrs[1] == -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then if playerID == False && attrs[7] == instance}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                   }{\hich\af4\loch\lang1033\f4\loch
then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                   }{\hich\af4\loch\lang1033\f4\loch
else if playerID == True && attrs[7] == instance + 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                        }{\hich\af4\loch\lang1033\f4\loch
then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                        }{\hich\af4\loch\lang1033\f4\loch
else attrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else attrs)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                            }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                      }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
updatedGameLog = gameLog ++ [(x, y, cardID)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(updatedGameState, updatedGameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let payMana : Mana -> i8 -> i8 -> Color -> (Mana, Bool) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ mana colorCost neutralCost color ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (enoughColorMana, newColorMana, newChromeMana) = case color of}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Red -> if mana.red + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                 }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.red - colorCost, if mana.red >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.red))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                 }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.red, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Green -> if mana.green + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                   }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.green - colorCost, if mana.green >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.green))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                   }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.green, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Blue -> if mana.blue + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                  }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.blue - colorCost, if mana.blue >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.blue))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                  }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.blue, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                          }{\hich\af4\loch\lang1033\f4\loch
Yellow -> if mana.yellow + mana.chrome >= colorCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                    }{\hich\af4\loch\lang1033\f4\loch
then (True, mana.yellow - colorCost, if mana.yellow >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.yellow))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                                                    }{\hich\af4\loch\lang1033\f4\loch
else (False, mana.yellow, mana.chrome)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let enoughNeutralMana = colorCost + neutralCost <= newColorMana + mana.neutral}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newNeutralMana = if enoughNeutralMana then mana.neutral + neutralCost else mana.neutral}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
if enoughColorMana && enoughNeutralMana}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
then (\{ red = if color == Red then newColorMana else mana.red,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
green = if color == Green then newColorMana else mana.green,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
blue = if color == Blue then newColorMana else mana.blue,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
yellow = if color == Yellow then newColorMana else mana.yellow,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
neutral = newNeutralMana,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
chrome = newChromeMana \}, True)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
else (mana, False)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Define a type for mana stores}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
type Mana = \{ red :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
green :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
blue :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
yellow :: i8,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
neutral :: i8 \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to initialize the accumulator}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let initAccumulator : Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\{ red = 0, green = 0, blue = 0, yellow = 0, neutral = 0 \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to update the accumulator when mana is spent}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let updateAccumulator : Mana -> i8 -> i8 -> Color -> Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ acc colorCost neutralCost color ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newRed = if color == Red then acc.red + colorCost else acc.red}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newGreen = if color == Green then acc.green + colorCost else acc.green}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newBlue = if color == Blue then acc.blue + colorCost else acc.blue}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newYellow = if color == Yellow then acc.yellow + colorCost else acc.yellow}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let newNeutral = acc.neutral + neutralCost}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\{ red = newRed, green = newGreen, blue = newBlue, yellow = newYellow, neutral = newNeutral \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
-- Function to calculate available mana for each color}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let availableMana : Mana -> Mana =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ spentMana ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let floorHalf = \\x -> x / 2}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\{ red = floorHalf spentMana.red,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
green = floorHalf spentMana.green,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
blue = floorHalf spentMana.blue,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
yellow = floorHalf spentMana.yellow,}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
neutral = floorHalf spentMana.neutral \}}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let isValidMove : (i8, i8, i8, i8, [[[[i32]]]]) -> i32 =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (startX, startY, endX, endY, gameState) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let rec bfs : [(i8, i8, i8)] -> [(i8, i8, i8)] -> i32 =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
\\ frontier visited ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
case frontier of}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
[] -> 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
(x, y, z) :: rest ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
let neighbors = [(x+1, y, z-1), (x+1, y-1, z), (x, y-1, z+1), (x-1, y, z+1), (x-1, y+1, z), (x, y+1, z-1)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
validNeighbors = filter (\\(nx, ny, nz) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= nx && nx < width &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= ny && ny < height &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
0 <= nz && nz < depth &&}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                           }{\hich\af4\loch\lang1033\f4\loch
gameState[toIndex nx][toIndex ny][toIndex nz][0] == -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                         }{\hich\af4\loch\lang1033\f4\loch
neighbors}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
newFrontier = filter (\\(nx, ny, nz) -> not (contains (nx, ny, nz) visited)) validNeighbors}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                }{\hich\af4\loch\lang1033\f4\loch
newVisited = visited ++ newFrontier}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (endX, endY, 0)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
else bfs rest newVisited}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let width = length gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = length (gameState[0])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = length (gameState[0][0])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
startZ = -(startX + startY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
endZ = -(endX + endY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if gameState[toIndex endX][toIndex endY][0] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then 0  -- Destination space is occupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
if endZ == 0}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
let pathExists = bfs [(endX, endY, 0)] []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
if pathExists == 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
else 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
let pathExists = bfs [(endX, endY, 0)] []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
if pathExists == 1 && abs(endX - startX) + abs(endY - startY) <= speed}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
then 1  -- Valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
else 0  -- No valid path found}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let moveUnit : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x1, y1, z1), (x2, y2, z2)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let unitAttrs = gameState[toIndex x1][toIndex y1][playerId]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(health, attack, speed, range, flying, areaEffect, cardID, instance) = (unitAttrs[0], unitAttrs[1], unitAttrs[2], unitAttrs[3], unitAttrs[4], unitAttrs[5], unitAttrs[6], unitAttrs[7])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
width = 22}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
height = 22}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
depth = 44}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
startZ = -(x1 + y1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
endZ = -(x2 + y2)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isValid = isValidMove x1 y1 z1 x2 y2 z2 gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isValid == 0}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
gameState -- Target position is unreachable within the unit's speed limit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\x ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (x1, y1, z1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then (-1, -1, -1.0, -1.0, False, False, -1, -1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else gameState[x][y][z]))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                    }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
updatedGameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let attack : (GameState, (i8, i8), (i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x1, y1), (x2, y2)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attackPower, range, _, _, _, _) = gameState[toIndex x1][toIndex y1][playerId]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
targetHealth = gameState[toIndex x2][toIndex y2][playerId][0]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(x1', y1', z1') = lookupCoordinate (x1, y1)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
(x2', y2', z2') = lookupCoordinate (x2, y2)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
newTargetHealth = if max(i8(abs(x2' - x1')), i8(abs(y2' - y1')), i8(abs(z2' - z1'))) <= range}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                          }{\hich\af4\loch\lang1033\f4\loch
then max(targetHealth - attackPower, 0)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                          }{\hich\af4\loch\lang1033\f4\loch
else targetHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
updateGameState : i32 -> GameState -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
\\ newHealth gameState' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
let updatedUnit = if newHealth > 0 then [newHealth, attackPower, range, _, _, _, _, _, _, _] else []}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
              }{\hich\af4\loch\lang1033\f4\loch
map (\\x ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                     }{\hich\af4\loch\lang1033\f4\loch
map (\\y ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                           }{\hich\af4\loch\lang1033\f4\loch
map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
if (x, y, z) == (x2', y2', z2')}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
then updatedUnit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                 }{\hich\af4\loch\lang1033\f4\loch
else gameState[x][y][z]))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                         }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                  }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                  }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
updateGameState newTargetHealth gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let heal : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (healerX, healerY, healerZ), (targetX, targetY, targetZ)) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (width, height, depth) = (22, 22, 44)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let healerHealing = gameState[toIndex healerX][toIndex healerY][0][2]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (targetHealth, _, _, _, _, _, _, originalHealth, _) = gameState[toIndex targetX][toIndex targetY][0]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dx = abs(healerX - targetX)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dy = abs(healerY - targetY)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let dz = abs(healerZ - targetZ)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isNeighbor = dx <= 1 && dy <= 1 && dz <= 1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let isInjured = targetHealth < originalHealth}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
if isNeighbor && isInjured}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let newTargetHealth = min(originalHealth, targetHealth + healerHealing)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedUnit = [newTargetHealth] ++ gameState[toIndex targetX][toIndex targetY][0][1:]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let updatedGameState = map (\\z ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                  }{\hich\af4\loch\lang1033\f4\loch
map (\\y' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                        }{\hich\af4\loch\lang1033\f4\loch
map (\\x' ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
if (x', y', z') == (targetX, targetY, targetZ)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
then updatedUnit}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                              }{\hich\af4\loch\lang1033\f4\loch
else gameState[x'][y'][z'])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                            }{\hich\af4\loch\lang1033\f4\loch
(0 ..< height))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                      }{\hich\af4\loch\lang1033\f4\loch
(0 ..< width))}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
                                }{\hich\af4\loch\lang1033\f4\loch
(0 ..< depth)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
updatedGameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4\loch
let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
  }{\hich\af4\loch\lang1033\f4\loch
\\ (gameState, (x, y), unitAttrs, gameLog) ->}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
let (health, attack, speed, range, flying, areaEffect, cardID, instance) = unitAttrs}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
    }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
      }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
if isOccupied}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
then}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
(gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
        }{\hich\af4\loch\lang1033\f4\loch
else}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedLocation = [health, attack, speed, range, flying, areaEffect, cardID, instance]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedLayer = map (\\layer -> updatedLocation) (gameState[x])}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedState = map (\\grid -> updatedLayer) gameState}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
let updatedGameLog = gameLog ++ [(x, y, cardID)]}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
          }{\hich\af4\loch\lang1033\f4\loch
in}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
if updatedState[0][0][0] == -1 && updatedState[0][0][1] == -1}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
then (updatedState, updatedGameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar{\hich\af4\loch\lang1033\f4
            }{\hich\af4\loch\lang1033\f4\loch
else (gameState, gameLog)}
\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch

\par \pard\plain \s0\rtlch\af12\afs24\alang1081 \ltrch\lang1033\langfe2052\hich\af3\loch\widctlpar\hyphpar0\ltrpar\cf0\f3\fs24\lang1033\kerning1\dbch\af11\langfe2052\ql\ltrpar\hich\af4\loch\lang1033\f4\loch
{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}{\*\bkmkstart __DdeLink__599_2946212008}{\*\bkmkend __DdeLink__599_2946212008}
}
text/html
a0c0



	
	
	

	
	
	

type UnitAttributes = (Bool,   -- playerID
                       f32,    -- speed
                       i8,     -- health
                       i8,     -- attack
                       f32,    -- range
                       Bool,   -- flying
                       Bool,   -- areaEffect
                       i8,     -- healing
                       i8,     -- originalHealth
                       i8,     -- cardID
                       i8)     -- instance



let coordinateMapping : [(i8, i8)] -> [(i8, i8, i8)] =
  \coords ->
    let zStart = 22 : i8
        width = 22 : i8
        height = 22 : i8
        depth = 44 : i8
    in
      map (\(x, y) -> (x, y, -(x + y))) coords

let allCoordinates : [(i8, i8)] =
  concat (map (\x -> map (\y -> (x, y)) (0 ..< 14 : i8)) (0 ..< 12 : i8))

let cubeCoordinates = coordinateMapping allCoordinates



let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =
  \ (gameState, (x, y), unitAttrs, gameLog) ->
    let (health, attack, speed, range, flying, areaEffect, cardID, instance, playerID) = unitAttrs
    let (width, height, depth) = (22, 22, 44)

    let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1

    if isOccupied
    then
      (gameState, gameLog)
    else
      let updatedGameState = map (\z ->
                                  map (\y' ->
                                        map (\x' ->
                                              let attrs = gameState[x'][y'][z']
                                              if attrs[0] == -1 || (attrs[0] == -1 && attrs[1] == -1)
                                              then if playerID == False && attrs[7] == instance
                                                   then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]
                                                   else if playerID == True && attrs[7] == instance + 1
                                                        then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]
                                                        else attrs
                                              else attrs)
                                            (0 ..< height))
                                      (0 ..< width))
                                (0 ..< depth)

          updatedGameLog = gameLog ++ [(x, y, cardID)]

      in
        (updatedGameState, updatedGameLog)

let payMana : Mana -> i8 -> i8 -> Color -> (Mana, Bool) =
  \ mana colorCost neutralCost color ->
    let (enoughColorMana, newColorMana, newChromeMana) = case color of
                                                          Red -> if mana.red + mana.chrome >= colorCost
                                                                 then (True, mana.red - colorCost, if mana.red >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.red))
                                                                 else (False, mana.red, mana.chrome)
                                                          Green -> if mana.green + mana.chrome >= colorCost
                                                                   then (True, mana.green - colorCost, if mana.green >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.green))
                                                                   else (False, mana.green, mana.chrome)
                                                          Blue -> if mana.blue + mana.chrome >= colorCost
                                                                  then (True, mana.blue - colorCost, if mana.blue >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.blue))
                                                                  else (False, mana.blue, mana.chrome)
                                                          Yellow -> if mana.yellow + mana.chrome >= colorCost
                                                                    then (True, mana.yellow - colorCost, if mana.yellow >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.yellow))
                                                                    else (False, mana.yellow, mana.chrome)
    let enoughNeutralMana = colorCost + neutralCost <= newColorMana + mana.neutral
    let newNeutralMana = if enoughNeutralMana then mana.neutral + neutralCost else mana.neutral
    in
      if enoughColorMana && enoughNeutralMana
      then ({ red = if color == Red then newColorMana else mana.red,
              green = if color == Green then newColorMana else mana.green,
              blue = if color == Blue then newColorMana else mana.blue,
              yellow = if color == Yellow then newColorMana else mana.yellow,
              neutral = newNeutralMana,
              chrome = newChromeMana }, True)
      else (mana, False)



-- Define a type for mana stores
type Mana = { red :: i8,
              green :: i8,
              blue :: i8,
              yellow :: i8,
              neutral :: i8 }

-- Function to initialize the accumulator
let initAccumulator : Mana =
  { red = 0, green = 0, blue = 0, yellow = 0, neutral = 0 }

-- Function to update the accumulator when mana is spent
let updateAccumulator : Mana -> i8 -> i8 -> Color -> Mana =
  \ acc colorCost neutralCost color ->
    let newRed = if color == Red then acc.red + colorCost else acc.red
    let newGreen = if color == Green then acc.green + colorCost else acc.green
    let newBlue = if color == Blue then acc.blue + colorCost else acc.blue
    let newYellow = if color == Yellow then acc.yellow + colorCost else acc.yellow
    let newNeutral = acc.neutral + neutralCost
    in
      { red = newRed, green = newGreen, blue = newBlue, yellow = newYellow, neutral = newNeutral }

-- Function to calculate available mana for each color
let availableMana : Mana -> Mana =
  \ spentMana ->
    let floorHalf = \x -> x / 2
    in
      { red = floorHalf spentMana.red,
        green = floorHalf spentMana.green,
        blue = floorHalf spentMana.blue,
        yellow = floorHalf spentMana.yellow,
        neutral = floorHalf spentMana.neutral }









let isValidMove : (i8, i8, i8, i8, [[[[i32]]]]) -> i32 =
  \ (startX, startY, endX, endY, gameState) ->
    let rec bfs : [(i8, i8, i8)] -> [(i8, i8, i8)] -> i32 =
      \ frontier visited ->
        case frontier of
          [] -> 0  -- No valid path found
          (x, y, z) :: rest ->
            let neighbors = [(x+1, y, z-1), (x+1, y-1, z), (x, y-1, z+1), (x-1, y, z+1), (x-1, y+1, z), (x, y+1, z-1)]
                validNeighbors = filter (\(nx, ny, nz) ->
                                           0 <= nx && nx < width &&
                                           0 <= ny && ny < height &&
                                           0 <= nz && nz < depth &&
                                           gameState[toIndex nx][toIndex ny][toIndex nz][0] == -1)
                                         neighbors
                newFrontier = filter (\(nx, ny, nz) -> not (contains (nx, ny, nz) visited)) validNeighbors
                newVisited = visited ++ newFrontier
            in
              if (x, y, z) == (endX, endY, 0)
              then 1  -- Valid path found
              else bfs rest newVisited

    let width = length gameState
        height = length (gameState[0])
        depth = length (gameState[0][0])
        startZ = -(startX + startY)
        endZ = -(endX + endY)

    if gameState[toIndex endX][toIndex endY][0] != -1
    then 0  -- Destination space is occupied
    else
      if endZ == 0
      then
        let pathExists = bfs [(endX, endY, 0)] []
        in
          if pathExists == 1
          then 1  -- Valid path found
          else 0  -- No valid path found
      else
        let pathExists = bfs [(endX, endY, 0)] []
        in
          if pathExists == 1 && abs(endX - startX) + abs(endY - startY) <= speed
          then 1  -- Valid path found
          else 0  -- No valid path found

let moveUnit : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =
  \ (gameState, (x1, y1, z1), (x2, y2, z2)) ->
    let unitAttrs = gameState[toIndex x1][toIndex y1][playerId]
        (health, attack, speed, range, flying, areaEffect, cardID, instance) = (unitAttrs[0], unitAttrs[1], unitAttrs[2], unitAttrs[3], unitAttrs[4], unitAttrs[5], unitAttrs[6], unitAttrs[7])
        width = 22
        height = 22
        depth = 44
        startZ = -(x1 + y1)
        endZ = -(x2 + y2)

    let isValid = isValidMove x1 y1 z1 x2 y2 z2 gameState
    if isValid == 0
    then
      gameState -- Target position is unreachable within the unit's speed limit
    else
      let updatedGameState = map (\x ->
                                  map (\y ->
                                        map (\z ->
                                              if (x, y, z) == (x1, y1, z1)
                                              then (-1, -1, -1.0, -1.0, False, False, -1, -1)
                                              else gameState[x][y][z]))
                                    (0 ..< width))
                                (0 ..< height)
                                (0 ..< depth)

          in
            updatedGameState


let attack : (GameState, (i8, i8), (i8, i8)) -> GameState =
  \ (gameState, (x1, y1), (x2, y2)) ->
    let (health, attackPower, range, _, _, _, _) = gameState[toIndex x1][toIndex y1][playerId]
        targetHealth = gameState[toIndex x2][toIndex y2][playerId][0]
        (x1', y1', z1') = lookupCoordinate (x1, y1)
        (x2', y2', z2') = lookupCoordinate (x2, y2)
        newTargetHealth = if max(i8(abs(x2' - x1')), i8(abs(y2' - y1')), i8(abs(z2' - z1'))) <= range
                          then max(targetHealth - attackPower, 0)
                          else targetHealth
        updateGameState : i32 -> GameState -> GameState =
          \ newHealth gameState' ->
            let updatedUnit = if newHealth > 0 then [newHealth, attackPower, range, _, _, _, _, _, _, _] else []
            in
              map (\x ->
                     map (\y ->
                           map (\z ->
                                 if (x, y, z) == (x2', y2', z2')
                                 then updatedUnit
                                 else gameState[x][y][z]))
                         (0 ..< width))
                  (0 ..< height)
                  (0 ..< depth)
    in
      updateGameState newTargetHealth gameState


let heal : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =
  \ (gameState, (healerX, healerY, healerZ), (targetX, targetY, targetZ)) ->
    let (width, height, depth) = (22, 22, 44)

    let healerHealing = gameState[toIndex healerX][toIndex healerY][0][2]

    let (targetHealth, _, _, _, _, _, _, originalHealth, _) = gameState[toIndex targetX][toIndex targetY][0]

    let dx = abs(healerX - targetX)
    let dy = abs(healerY - targetY)
    let dz = abs(healerZ - targetZ)

    let isNeighbor = dx <= 1 && dy <= 1 && dz <= 1

    let isInjured = targetHealth < originalHealth

    if isNeighbor && isInjured
    then
      let newTargetHealth = min(originalHealth, targetHealth + healerHealing)
      let updatedUnit = [newTargetHealth] ++ gameState[toIndex targetX][toIndex targetY][0][1:]
      let updatedGameState = map (\z ->
                                  map (\y' ->
                                        map (\x' ->
                                              if (x', y', z') == (targetX, targetY, targetZ)
                                              then updatedUnit
                                              else gameState[x'][y'][z'])
                                            (0 ..< height))
                                      (0 ..< width))
                                (0 ..< depth)
      in
        updatedGameState
    else
      gameState














let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =
  \ (gameState, (x, y), unitAttrs, gameLog) ->
    let (health, attack, speed, range, flying, areaEffect, cardID, instance) = unitAttrs
    in
      let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1
      in
        if isOccupied
        then
          (gameState, gameLog)
        else
          let updatedLocation = [health, attack, speed, range, flying, areaEffect, cardID, instance]
          let updatedLayer = map (\layer -> updatedLocation) (gameState[x])
          let updatedState = map (\grid -> updatedLayer) gameState
          let updatedGameLog = gameLog ++ [(x, y, cardID)]
          in
            if updatedState[0][0][0] == -1 && updatedState[0][0][1] == -1
            then (updatedState, updatedGameLog)
            else (gameState, gameLog)




text/plain;charset=utf-8
31e9
type UnitAttributes = (Bool,   -- playerID
                       f32,    -- speed
                       i8,     -- health
                       i8,     -- attack
                       f32,    -- range
                       Bool,   -- flying
                       Bool,   -- areaEffect
                       i8,     -- healing
                       i8,     -- originalHealth
                       i8,     -- cardID
                       i8)     -- instance



let coordinateMapping : [(i8, i8)] -> [(i8, i8, i8)] =
  \coords ->
    let zStart = 22 : i8
        width = 22 : i8
        height = 22 : i8
        depth = 44 : i8
    in
      map (\(x, y) -> (x, y, -(x + y))) coords

let allCoordinates : [(i8, i8)] =
  concat (map (\x -> map (\y -> (x, y)) (0 ..< 14 : i8)) (0 ..< 12 : i8))

let cubeCoordinates = coordinateMapping allCoordinates



let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =
  \ (gameState, (x, y), unitAttrs, gameLog) ->
    let (health, attack, speed, range, flying, areaEffect, cardID, instance, playerID) = unitAttrs
    let (width, height, depth) = (22, 22, 44)

    let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1

    if isOccupied
    then
      (gameState, gameLog)
    else
      let updatedGameState = map (\z ->
                                  map (\y' ->
                                        map (\x' ->
                                              let attrs = gameState[x'][y'][z']
                                              if attrs[0] == -1 || (attrs[0] == -1 && attrs[1] == -1)
                                              then if playerID == False && attrs[7] == instance
                                                   then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]
                                                   else if playerID == True && attrs[7] == instance + 1
                                                        then [health, attack, speed, range, flying, areaEffect, cardID, instance, playerID]
                                                        else attrs
                                              else attrs)
                                            (0 ..< height))
                                      (0 ..< width))
                                (0 ..< depth)

          updatedGameLog = gameLog ++ [(x, y, cardID)]

      in
        (updatedGameState, updatedGameLog)

let payMana : Mana -> i8 -> i8 -> Color -> (Mana, Bool) =
  \ mana colorCost neutralCost color ->
    let (enoughColorMana, newColorMana, newChromeMana) = case color of
                                                          Red -> if mana.red + mana.chrome >= colorCost
                                                                 then (True, mana.red - colorCost, if mana.red >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.red))
                                                                 else (False, mana.red, mana.chrome)
                                                          Green -> if mana.green + mana.chrome >= colorCost
                                                                   then (True, mana.green - colorCost, if mana.green >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.green))
                                                                   else (False, mana.green, mana.chrome)
                                                          Blue -> if mana.blue + mana.chrome >= colorCost
                                                                  then (True, mana.blue - colorCost, if mana.blue >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.blue))
                                                                  else (False, mana.blue, mana.chrome)
                                                          Yellow -> if mana.yellow + mana.chrome >= colorCost
                                                                    then (True, mana.yellow - colorCost, if mana.yellow >= colorCost then mana.chrome else mana.chrome - (colorCost - mana.yellow))
                                                                    else (False, mana.yellow, mana.chrome)
    let enoughNeutralMana = colorCost + neutralCost <= newColorMana + mana.neutral
    let newNeutralMana = if enoughNeutralMana then mana.neutral + neutralCost else mana.neutral
    in
      if enoughColorMana && enoughNeutralMana
      then ({ red = if color == Red then newColorMana else mana.red,
              green = if color == Green then newColorMana else mana.green,
              blue = if color == Blue then newColorMana else mana.blue,
              yellow = if color == Yellow then newColorMana else mana.yellow,
              neutral = newNeutralMana,
              chrome = newChromeMana }, True)
      else (mana, False)



-- Define a type for mana stores
type Mana = { red :: i8,
              green :: i8,
              blue :: i8,
              yellow :: i8,
              neutral :: i8 }

-- Function to initialize the accumulator
let initAccumulator : Mana =
  { red = 0, green = 0, blue = 0, yellow = 0, neutral = 0 }

-- Function to update the accumulator when mana is spent
let updateAccumulator : Mana -> i8 -> i8 -> Color -> Mana =
  \ acc colorCost neutralCost color ->
    let newRed = if color == Red then acc.red + colorCost else acc.red
    let newGreen = if color == Green then acc.green + colorCost else acc.green
    let newBlue = if color == Blue then acc.blue + colorCost else acc.blue
    let newYellow = if color == Yellow then acc.yellow + colorCost else acc.yellow
    let newNeutral = acc.neutral + neutralCost
    in
      { red = newRed, green = newGreen, blue = newBlue, yellow = newYellow, neutral = newNeutral }

-- Function to calculate available mana for each color
let availableMana : Mana -> Mana =
  \ spentMana ->
    let floorHalf = \x -> x / 2
    in
      { red = floorHalf spentMana.red,
        green = floorHalf spentMana.green,
        blue = floorHalf spentMana.blue,
        yellow = floorHalf spentMana.yellow,
        neutral = floorHalf spentMana.neutral }









let isValidMove : (i8, i8, i8, i8, [[[[i32]]]]) -> i32 =
  \ (startX, startY, endX, endY, gameState) ->
    let rec bfs : [(i8, i8, i8)] -> [(i8, i8, i8)] -> i32 =
      \ frontier visited ->
        case frontier of
          [] -> 0  -- No valid path found
          (x, y, z) :: rest ->
            let neighbors = [(x+1, y, z-1), (x+1, y-1, z), (x, y-1, z+1), (x-1, y, z+1), (x-1, y+1, z), (x, y+1, z-1)]
                validNeighbors = filter (\(nx, ny, nz) ->
                                           0 <= nx && nx < width &&
                                           0 <= ny && ny < height &&
                                           0 <= nz && nz < depth &&
                                           gameState[toIndex nx][toIndex ny][toIndex nz][0] == -1)
                                         neighbors
                newFrontier = filter (\(nx, ny, nz) -> not (contains (nx, ny, nz) visited)) validNeighbors
                newVisited = visited ++ newFrontier
            in
              if (x, y, z) == (endX, endY, 0)
              then 1  -- Valid path found
              else bfs rest newVisited

    let width = length gameState
        height = length (gameState[0])
        depth = length (gameState[0][0])
        startZ = -(startX + startY)
        endZ = -(endX + endY)

    if gameState[toIndex endX][toIndex endY][0] != -1
    then 0  -- Destination space is occupied
    else
      if endZ == 0
      then
        let pathExists = bfs [(endX, endY, 0)] []
        in
          if pathExists == 1
          then 1  -- Valid path found
          else 0  -- No valid path found
      else
        let pathExists = bfs [(endX, endY, 0)] []
        in
          if pathExists == 1 && abs(endX - startX) + abs(endY - startY) <= speed
          then 1  -- Valid path found
          else 0  -- No valid path found

let moveUnit : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =
  \ (gameState, (x1, y1, z1), (x2, y2, z2)) ->
    let unitAttrs = gameState[toIndex x1][toIndex y1][playerId]
        (health, attack, speed, range, flying, areaEffect, cardID, instance) = (unitAttrs[0], unitAttrs[1], unitAttrs[2], unitAttrs[3], unitAttrs[4], unitAttrs[5], unitAttrs[6], unitAttrs[7])
        width = 22
        height = 22
        depth = 44
        startZ = -(x1 + y1)
        endZ = -(x2 + y2)

    let isValid = isValidMove x1 y1 z1 x2 y2 z2 gameState
    if isValid == 0
    then
      gameState -- Target position is unreachable within the unit's speed limit
    else
      let updatedGameState = map (\x ->
                                  map (\y ->
                                        map (\z ->
                                              if (x, y, z) == (x1, y1, z1)
                                              then (-1, -1, -1.0, -1.0, False, False, -1, -1)
                                              else gameState[x][y][z]))
                                    (0 ..< width))
                                (0 ..< height)
                                (0 ..< depth)

          in
            updatedGameState


let attack : (GameState, (i8, i8), (i8, i8)) -> GameState =
  \ (gameState, (x1, y1), (x2, y2)) ->
    let (health, attackPower, range, _, _, _, _) = gameState[toIndex x1][toIndex y1][playerId]
        targetHealth = gameState[toIndex x2][toIndex y2][playerId][0]
        (x1', y1', z1') = lookupCoordinate (x1, y1)
        (x2', y2', z2') = lookupCoordinate (x2, y2)
        newTargetHealth = if max(i8(abs(x2' - x1')), i8(abs(y2' - y1')), i8(abs(z2' - z1'))) <= range
                          then max(targetHealth - attackPower, 0)
                          else targetHealth
        updateGameState : i32 -> GameState -> GameState =
          \ newHealth gameState' ->
            let updatedUnit = if newHealth > 0 then [newHealth, attackPower, range, _, _, _, _, _, _, _] else []
            in
              map (\x ->
                     map (\y ->
                           map (\z ->
                                 if (x, y, z) == (x2', y2', z2')
                                 then updatedUnit
                                 else gameState[x][y][z]))
                         (0 ..< width))
                  (0 ..< height)
                  (0 ..< depth)
    in
      updateGameState newTargetHealth gameState


let heal : (GameState, (i8, i8, i8), (i8, i8, i8)) -> GameState =
  \ (gameState, (healerX, healerY, healerZ), (targetX, targetY, targetZ)) ->
    let (width, height, depth) = (22, 22, 44)

    let healerHealing = gameState[toIndex healerX][toIndex healerY][0][2]

    let (targetHealth, _, _, _, _, _, _, originalHealth, _) = gameState[toIndex targetX][toIndex targetY][0]

    let dx = abs(healerX - targetX)
    let dy = abs(healerY - targetY)
    let dz = abs(healerZ - targetZ)

    let isNeighbor = dx <= 1 && dy <= 1 && dz <= 1

    let isInjured = targetHealth < originalHealth

    if isNeighbor && isInjured
    then
      let newTargetHealth = min(originalHealth, targetHealth + healerHealing)
      let updatedUnit = [newTargetHealth] ++ gameState[toIndex targetX][toIndex targetY][0][1:]
      let updatedGameState = map (\z ->
                                  map (\y' ->
                                        map (\x' ->
                                              if (x', y', z') == (targetX, targetY, targetZ)
                                              then updatedUnit
                                              else gameState[x'][y'][z'])
                                            (0 ..< height))
                                      (0 ..< width))
                                (0 ..< depth)
      in
        updatedGameState
    else
      gameState














let placeUnit : (GameState, (i8, i8), UnitAttributes, [(i8, i8, i8)]) -> (GameState, [(i8, i8, i8)]) =
  \ (gameState, (x, y), unitAttrs, gameLog) ->
    let (health, attack, speed, range, flying, areaEffect, cardID, instance) = unitAttrs
    in
      let isOccupied = gameState[x][y][0] != -1 || gameState[x][y][1] != -1
      in
        if isOccupied
        then
          (gameState, gameLog)
        else
          let updatedLocation = [health, attack, speed, range, flying, areaEffect, cardID, instance]
          let updatedLayer = map (\layer -> updatedLocation) (gameState[x])
          let updatedState = map (\grid -> updatedLayer) gameState
          let updatedGameLog = gameLog ++ [(x, y, cardID)]
          in
            if updatedState[0][0][0] == -1 && updatedState[0][0][1] == -1
            then (updatedState, updatedGameLog)
            else (gameState, gameLog)


application/x-openoffice-link;windows_formatname="Link"
51
soffice/tmp/user/docs/IvLFJCXwGasPT7BJ/Code BAse.odt__DdeLink__608_2946212008
application/x-openoffice-objectdescriptor-xml;windows_formatname="Star Object Descriptor (XML)";classname="8BC6B165-B1B2-4EDD-aa47-dae2ee689dd6";typename="Collabora Office 22.05 Text Document";displayname="file:///tmp/user/docs/IvLFJCXwGasPT7BJ/Code BAse.odt";viewaspect="1";width="17000";height="3000";posx="0";posy="0"
8c
�e�Ƌ���N�G���h��hB�$Collabora Office 22.05 Text Document4file:///tmp/user/docs/IvLFJCXwGasPT7BJ/Code BAse.odtgE#�ͫ�
